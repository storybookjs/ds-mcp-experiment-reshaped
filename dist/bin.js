/*
	This file is generated by tsdown.
	Do not edit it directly, even though it is checked into git.
	To build it run 'pnpm build'.
*/

import * as fs from "node:fs/promises";
import { McpServer } from "tmcp";
import { ValibotJsonSchemaAdapter } from "@tmcp/adapter-valibot";
import { StdioTransport } from "@tmcp/transport-stdio";
import * as v from "valibot";

//#region llm-docs/component-manifest.md
var component_manifest_default = "# Reshaped Design System Component Manifest\n\nThis document provides a comprehensive list of all components, utilities, hooks, and functions available in the reshaped design system.\n\n## Components\n\n### UI Components\n\n| ID                  | Name              | Description                                                                                                                                                                             |\n| ------------------- | ----------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| action-bar          | ActionBar         | A flexible container component for positioning action elements at specific locations within the viewport or container with animation and elevation support.                             |\n| alert               | Alert             | A versatile notification component that displays contextual messages with optional icons, actions, and different color variants to communicate various states and information to users. |\n| autocomplete        | Autocomplete      | A searchable input field with dropdown suggestions that supports keyboard navigation and item selection.                                                                                |\n| avatar              | Avatar            | A versatile component for displaying user profile images, initials, or icons with customizable sizing, colors, and variants.                                                            |\n| badge               | Badge             | A compact, versatile component for displaying status, counts, and labels with support for colors, sizes, icons, and interactive functionality.                                          |\n| button              | Button            | A versatile button component for user interactions with comprehensive styling options and built-in loading states.                                                                      |\n| breadcrumbs         | Breadcrumbs       | A navigation component that displays the current page's location within a hierarchical site structure, allowing users to understand their position and navigate to parent pages.        |\n| calendar            | Calendar          | A versatile date picker component that supports both single date and date range selection with keyboard navigation and accessibility features.                                          |\n| card                | Card              | A versatile container component that provides structured content areas with consistent styling, spacing, and interaction capabilities.                                                  |\n| carousel            | Carousel          | A horizontal scrolling container component that displays multiple items in a row with navigation controls and responsive item sizing.                                                   |\n| checkbox            | Checkbox          | A form control that allows users to select one or multiple options from a set of choices, with support for controlled and uncontrolled states.                                          |\n| checkbox-group      | CheckboxGroup     | A container component that manages multiple checkbox selections as a group, providing both controlled and uncontrolled behavior patterns.                                               |\n| context-menu        | ContextMenu       | A context menu component that displays a dropdown menu when users right-click on an element.                                                                                            |\n| divider             | Divider           | A visual separator component that creates horizontal or vertical dividing lines between content sections.                                                                               |\n| dropdown-menu       | DropdownMenu      | A contextual menu component that displays a list of actions or options in an overlay, triggered by user interaction with a button or other control.                                     |\n| file-upload         | FileUpload        | A drag-and-drop file upload component with visual feedback and customizable trigger options.                                                                                            |\n| hotkey              | Hotkey            | A styled keyboard shortcut indicator component that displays keyboard combinations with visual emphasis and active states.                                                              |\n| link                | Link              | A flexible link component that renders as either an anchor tag or button with consistent styling and optional icon support.                                                             |\n| loader              | Loader            | A circular spinning loader component that indicates loading or processing states.                                                                                                       |\n| menu-item           | MenuItem          | A flexible menu item component that provides actionable items for navigation menus, dropdown lists, and selection interfaces.                                                           |\n| modal               | Modal             | A versatile overlay component that presents content in a dialog above the main interface, with support for multiple positioning modes and touch gestures.                               |\n| number-field        | NumberField       | A numeric input field with increment/decrement controls for precise number entry.                                                                                                       |\n| pagination          | Pagination        | A pagination component that allows users to navigate through multiple pages of content with intelligent page number display and truncation.                                             |\n| pin-field           | PinField          | A specialized input component for entering PIN codes, verification codes, or other sequential character inputs with individual character slots.                                         |\n| popover             | Popover           | A flexible overlay component that displays contextual content anchored to a trigger element with customizable positioning, styling, and interaction modes.                              |\n| progress            | Progress          | A visual indicator component that displays the completion progress of a task or process as a horizontal bar.                                                                            |\n| progress-indicator  | ProgressIndicator | A visual indicator that shows the user's progress through a multi-step process or sequence with animated transitions and smart pagination.                                              |\n| radio               | Radio             | A customizable radio button component for single selection within a group of options.                                                                                                   |\n| radio-group         | RadioGroup        | A form control component that manages a group of radio buttons for single-value selection from multiple options.                                                                        |\n| scrim               | Scrim             | A component that overlays content on top of a background with gradient transitions and positioning options.                                                                             |\n| select              | Select            | A form control component that allows users to choose from predefined options using either a native HTML select dropdown or a custom button-triggered interface.                         |\n| skeleton            | Skeleton          | A loading placeholder component that displays a shimmering animation to indicate content is being loaded.                                                                               |\n| slider              | Slider            | A versatile slider input component that supports both single value and range selection with customizable styling and accessibility features.                                            |\n| stepper             | Stepper           | A multi-step process indicator that shows progress through sequential steps with optional content areas and navigation controls.                                                        |\n| switch              | Switch            | A binary control component that allows users to toggle between on and off states.                                                                                                       |\n| table               | Table             | A flexible table component for displaying structured data in rows and columns with comprehensive styling and interaction capabilities.                                                  |\n| tabs                | Tabs              | A tabbed interface component that organizes content into panels with corresponding navigable tabs.                                                                                      |\n| text-area           | TextArea          | A multi-line text input component with configurable variants, sizes, and automatic resize functionality.                                                                                |\n| text-field          | TextField         | A versatile text input component that supports various visual styles, icons, affixes, and slot-based attachments for form data collection.                                              |\n| timeline            | Timeline          | A component for displaying chronological sequences of events or content items with optional visual markers and connecting lines.                                                        |\n| toast               | Toast             | A comprehensive toast notification system that provides temporary feedback to users through dismissible overlay messages positioned at screen edges.                                    |\n| toggle-button       | ToggleButton      | A clickable button component that maintains toggle state, functioning like a checkbox with visual button appearance and supporting both controlled and uncontrolled modes.              |\n| toggle-button-group | ToggleButtonGroup | A component that groups multiple toggle buttons together with coordinated selection state management.                                                                                   |\n| tooltip             | Tooltip           | A hover-triggered overlay that displays contextual information or help text relative to a trigger element.                                                                              |\n\n### Utility Components\n\n| ID              | Name           | Description                                                                                                                                                                            |\n| --------------- | -------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| reshaped        | Reshaped       | The root provider component that initializes the Reshaped design system with theme, color mode, internationalization, and global providers.                                            |\n| accordion       | Accordion      | An interactive disclosure component that allows users to expand and collapse content sections with smooth animations.                                                                  |\n| actionable      | Actionable     | A flexible utility component that provides interactive behavior for any content, automatically rendering as appropriate HTML elements (button, link, or span) based on provided props. |\n| container       | Container      | A responsive layout component that provides consistent horizontal padding and centering behavior for content sections.                                                                 |\n| dismissible     | Dismissible    | A utility component that adds a dismissible overlay with an optional close button to any content.                                                                                      |\n| flyout          | Flyout         | A versatile positioning utility component that renders content relative to a trigger element, supporting multiple interaction modes and positioning strategies.                        |\n| form-control    | FormControl    | A wrapper component that provides accessible form field structure with label, helper text, and error message support.                                                                  |\n| grid            | Grid           | A flexible CSS Grid layout component that provides comprehensive grid-based layout capabilities with responsive design support and grid item positioning controls.                     |\n| hidden          | Hidden         | A utility component for controlling element visibility across different viewport sizes with responsive breakpoints.                                                                    |\n| hidden-visually | HiddenVisually | A utility component that visually hides content while keeping it accessible to screen readers and other assistive technologies.                                                        |\n| icon            | Icon           | A utility component for rendering SVG icons with consistent sizing, colors, and accessibility attributes.                                                                              |\n| image           | Image          | A responsive image component with smart loading states, fallback support, and flexible display modes.                                                                                  |\n| overlay         | Overlay        | A modal overlay component that creates a backdrop layer with focus management and accessibility features.                                                                              |\n| resizable       | Resizable      | A flexible layout component that enables users to dynamically adjust the size of panels or sections through interactive dragging handles.                                              |\n| scroll-area     | ScrollArea     | A customizable scrollable container component with optional custom scrollbars for both horizontal and vertical overflow content.                                                       |\n| text            | Text           | A flexible typography component for displaying text content with consistent styling and semantic HTML structure.                                                                       |\n| view            | View           | A versatile layout component that provides flexbox-based container functionality with comprehensive styling, spacing, and positioning capabilities.                                    |\n\n## Hooks\n\n| ID                           | Name                      | Description                                                                                                                                                         |\n| ---------------------------- | ------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| use-form-control             | useFormControl            | A React hook that provides form control context data including attributes, required status, error state, and disabled state for form input components.              |\n| theme-use-theme              | Theme/useTheme            | Theme component provides theming context and color mode management for the reshaped design system, while useTheme hook provides access to theme state and controls. |\n| use-handler-ref              | useHandlerRef             | A React hook that wraps event handlers in a stable ref to prevent unnecessary effect re-runs while keeping the handler implementation up-to-date.                   |\n| use-hotkeys                  | useHotkeys                | A React hook for handling keyboard shortcuts with support for key combinations, modifier keys, and scoped event handling within specific DOM elements.              |\n| use-isomorphic-layout-effect | useIsomorphicLayoutEffect | A cross-platform hook that uses useLayoutEffect on the client and useEffect on the server to prevent SSR hydration issues.                                          |\n| use-keyboard-mode            | useKeyboardMode           | A React hook that provides programmatic control over keyboard interaction mode for improved accessibility.                                                          |\n| use-on-click-outside         | useOnClickOutside         | A custom React hook that detects clicks outside specified elements and executes a callback handler.                                                                 |\n| use-responsive-client-value  | useResponsiveClientValue  | A React hook that resolves responsive values on the client side by detecting the current viewport and returning the appropriate value for that breakpoint.          |\n| use-rtl                      | useRTL                    | A React hook that provides access to the current RTL state and a function to toggle reading direction for internationalization support.                             |\n| use-scroll-lock              | useScrollLock             | React hook for managing scroll behavior on containers or document body with platform-specific locking strategies.                                                   |\n| use-toggle                   | useToggle                 | A React hook that manages boolean state with convenient toggle, activate, and deactivate functions for on/off UI interactions.                                      |\n\n## Utilities\n\n| ID                | Name              | Description                                                                                                                                                        |\n| ----------------- | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| utility-functions | Utility Functions | Core utilities for handling CSS class names and responsive properties in the reshaped design system                                                                |\n| trap-focus        | TrapFocus         | A utility class for managing keyboard focus within specific regions of the DOM, supporting multiple navigation modes including dialog, menu, and bar interactions. |\n\n## Development Utilities\n\n| ID          | Name        | Description                                                                                                               |\n| ----------- | ----------- | ------------------------------------------------------------------------------------------------------------------------- |\n| placeholder | Placeholder | A development utility component that creates a styled placeholder box for Storybook demonstrations and component testing. |\n\n---\n\n**Total Components**: 44 UI Components + 17 Utility Components = 61 Components  \n**Total Hooks**: 11 React Hooks  \n**Total Utilities**: 2 Utility Functions + 1 Development Utility = 3 Utilities\n\n**Grand Total**: 75 documented entities\n\nAll documentation files are available in the `llm-docs2/` directory with comprehensive details for each entity including props, usage examples, accessibility considerations, and integration guidance.\n";

//#endregion
//#region src/bin.ts
const LIST_TOOL_NAME = "list_all";
const GET_DOCS_TOOL_NAME = "get_documentation";
const adapter = new ValibotJsonSchemaAdapter();
const server = new McpServer({
	name: "ds-mcp",
	version: "0.0.1",
	description: "MCP server for the Reshaped design system"
}, {
	adapter,
	capabilities: { tools: { listChanged: true } }
});
server.tool({
	name: LIST_TOOL_NAME,
	description: `List all components, React hooks and utility functions from the Reshaped design system.
ALWAYS use this tool when building complex UI, as you should prefer to compose components from the package together instead of hardcoding them.
This tool returns descriptions and ids of each component, React hook and utility function.
Use the ids to call the ${GET_DOCS_TOOL_NAME} tool for one or more components that you might need to use for your UI component building task.`
}, () => ({ content: [{
	type: "text",
	text: component_manifest_default
}] }));
server.tool({
	name: GET_DOCS_TOOL_NAME,
	description: `Get documentation of a specific component, React hook or utility function.
Pass in the id that you get from the ${LIST_TOOL_NAME} tool, for the item you want documentation for.`,
	schema: v.object({ id: v.string() })
}, async ({ id }) => {
	const path = `./llm-docs/${id}.md`;
	const fileExists = await fs.access(path, fs.constants.F_OK).then(() => true).catch(() => false);
	if (!fileExists) return { content: [{
		type: "text",
		text: `ERROR id '${id}' not found
First use the ${LIST_TOOL_NAME} tool to get a list of available components, React hooks and utility functions and their ids.`
	}] };
	try {
		const documentation = await fs.readFile(path, "utf-8");
		return { content: [{
			type: "text",
			text: documentation
		}] };
	} catch (error) {
		return { content: [{
			type: "text",
			text: `Error: ${error.message ?? "Unknown error"}`
		}] };
	}
});
const transport = new StdioTransport(server);
transport.listen();

//#endregion
export {  };
